diff --git a/teavm-runtime.js b/runtime.js
index 4c11730..b7b8b6a 100644
--- a/teavm-runtime.js
+++ b/runtime.js
@@ -13,7 +13,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-// !BEGINNING!
+import { fileURLToPath } from 'url'
 
 let globalsCache = new Map();
 let stackDeobfuscator = null;
@@ -208,7 +208,7 @@ function coreImports(imports, context, options, module) {
             return context.exports["teavm.memory"].buffer;
         }
     };
-    if (hasImportedMemory(module)) {
+    if (module && hasImportedMemory(module)) {
         let memoryOptions = options.memory || {};
         let memoryInstance = memoryOptions["external"];
         if (!memoryInstance) {
@@ -655,10 +655,21 @@ function wrapImport(importObj) {
     });
 }
 
-async function wrapImports(wasmModule, imports) {
+// patch start
+async function readImports(wasmModule, src) {
+    try {
+        return WebAssembly.Module.imports(wasmModule);
+    } catch (e) {
+        const { parseImports } = await import("./wasm-imports-parser.js");
+        return parseImports(typeof src === "string" ? await (await fetch(src)).arrayBuffer() : src);
+    }
+}
+// patch end
+
+async function wrapImports(wasmModule, imports, src) { // patch - src
     let promises = [];
     let propertiesToAdd = {};
-    for (let { module, name, kind } of WebAssembly.Module.imports(wasmModule)) {
+    for (let { module, name, kind } of await readImports(wasmModule, src)) { // patch - readImports
         if (kind !== "global" || module in imports) {
             continue;
         }
@@ -693,15 +704,21 @@ async function load(src, options) {
         options = {};
     }
 
+    let isNodeJs = options.nodejs || typeof process !== "undefined";
+
+    // patch start - use path if is a file on the file system
+    if (src.startsWith("file://") && isNodeJs) {
+        src = fileURLToPath(src)
+    }
+    // patch end
+
     let deobfuscatorOptions = options.stackDeobfuscator || {};
     let debugInfoLocation = deobfuscatorOptions.infoLocation || "auto";
-    let compilationPromise = typeof src === "string"
-        ? WebAssembly.compileStreaming(fetch(src), { builtins: ["js-string"] })
-        : WebAssembly.compile(src, { builtins: ["js-string"] });
+    let compilationPromise = compileModule(src, isNodeJs);
     let [deobfuscatorFactory, module, debugInfo] = await Promise.all([
-        deobfuscatorOptions.enabled ? getDeobfuscator(src, deobfuscatorOptions) : Promise.resolve(null),
+        deobfuscatorOptions.enabled ? getDeobfuscator(src, deobfuscatorOptions, isNodeJs) : Promise.resolve(null),
         compilationPromise,
-        fetchExternalDebugInfo(src, debugInfoLocation, deobfuscatorOptions)
+        fetchExternalDebugInfo(src, debugInfoLocation, deobfuscatorOptions, isNodeJs)
     ]);
 
     const importObj = {};
@@ -711,7 +728,7 @@ async function load(src, options) {
         options.installImports(importObj);
     }
     if (!options.noAutoImports) {
-        await wrapImports(module, importObj);
+        await wrapImports(module, importObj, src); // patch - src
     }
     let instance = await WebAssembly.instantiate(module, importObj);
 
@@ -739,7 +756,15 @@ async function load(src, options) {
     return teavm;
 }
 
-let stringBuiltinsCache = null;
+async function compileModule(src, isNodeJs) {
+    if (typeof src !== "string") {
+        return await WebAssembly.compile(src, { builtins: ["js-string"] });
+    }
+    let [response, close] = await openPath(src, isNodeJs);
+    let result = await WebAssembly.compileStreaming(response, { builtins: ["js-string"] });
+    close();
+    return result;
+}
 
 function hasStringBuiltins() {
     if (stringBuiltinsCache === null) {
@@ -757,22 +782,15 @@ function hasStringBuiltins() {
     return stringBuiltinsCache;
 }
 
-async function getDeobfuscator(path, options) {
+async function getDeobfuscator(path, options, isNodeJs) {
     if (typeof path !== "string" && !options.path) {
         return null;
     }
     try {
         const importObj = {};
-        const defaultsResult = defaults(importObj, {});
-        const deobfuscatorPath = options.path || path + "-deobfuscator.wasm";
-        const { instance } = await WebAssembly.instantiateStreaming(
-            fetch(deobfuscatorPath),
-            importObj,
-            {
-                builtins: ["js-string"]
-            }
-        );
-        defaultsResult.supplyExports(instance.exports)
+        const defaultsResult = defaults(importObj, {}, {});
+        const instance = await instantiateModule(options.path, path, isNodeJs, importObj);
+        defaultsResult.supplyExports(instance.exports);
         return instance;
     } catch (e) {
         console.warn("Could not load deobfuscator", e);
@@ -780,6 +798,51 @@ async function getDeobfuscator(path, options) {
     }
 }
 
+async function instantiateModule(optionsPath, path, isNodeJs, importObj) {
+    if (typeof optionsPath === "object") {
+        return await WebAssembly.instantiate(optionsPath, importObj, { builtins: ["js-string"] });
+    }
+    const deobfuscatorPath = optionsPath || path + "-deobfuscator.wasm";
+    let [response, close] = await openPath(deobfuscatorPath, isNodeJs);
+    const { instance } = await WebAssembly.instantiateStreaming(
+        response,
+        importObj,
+        {
+            builtins: ["js-string"]
+        }
+    );
+    close();
+    return instance;
+}
+
+async function openPath(src, isNodeJs) {
+    let response;
+    let close;
+    if (!isNodeJs) {
+        response = await fetch(src);
+        close = () => {};
+    } else {
+        let fs = await importNodeFs();
+        let fileHandle = await fs.open(src, "r");
+        let stream = await fileHandle.readableWebStream();
+        response = new Response(stream, {
+            headers: { 'Content-Type': 'application/wasm' },
+        });
+        close = () => fileHandle.close();
+    }
+    return [response, close];
+}
+
+let nodeFsImportObject;
+async function importNodeFs() {
+    if (!nodeFsImportObject) {
+        nodeFsImportObject = import('node:fs/promises')
+    }
+    return await nodeFsImportObject;
+}
+
+let stringBuiltinsCache = null;
+
 function createDeobfuscator(module, externalData, deobfuscatorFactory) {
     let deobfuscator = null;
     let deobfuscatorInitialized = false;
@@ -808,17 +871,33 @@ function createDeobfuscator(module, externalData, deobfuscatorFactory) {
     }
 }
 
-async function fetchExternalDebugInfo(path, debugInfoLocation, options) {
-    if (!options.enabled || typeof path !== "string") {
+async function fetchExternalDebugInfo(path, debugInfoLocation, options, isNodeJs) {
+    if (!options.enabled) {
+        return null;
+    }
+    if (typeof path !== "string" && !options.externalInfoPath) {
         return null;
     }
     if (debugInfoLocation !== "auto" && debugInfoLocation !== "external") {
         return null;
     }
+    if (typeof options.externalInfoPath === "object") {
+        return options.externalInfoPath;
+    }
     let location = options.externalInfoPath || path + ".teadbg";
-    let response = await fetch(location);
-    if (!response.ok) {
-        return null;
+    let buffer;
+    if (!isNodeJs) {
+        let response = await fetch(location);
+        if (!response.ok) {
+            return null;
+        }
+        buffer = await response.arrayBuffer();
+    } else {
+        let fs = await importNodeFs();
+        buffer = (await fs.readFile(location)).buffer;
     }
-    return new Int8Array(await response.arrayBuffer());
-}
\ No newline at end of file
+
+    return new Int8Array(buffer);
+}
+
+export { load, defaults, wrapImport };
\ No newline at end of file
